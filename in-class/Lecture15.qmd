---
title: "Lecture15"
format: html
editor: visual
---

# Activity 1 - Problem 2.7 and 8.8 in FPP3
2.7: Monthly Australian retail data is provided in aus_retail. Select one of the time series as
follows (but choose your own seed value):

```{r}
set.seed(12345678)
library(fpp3)

myseries <- aus_retail |>
filter(`Series ID` == sample(aus_retail$`Series ID`,1))
```

Explore your chosen retail time series using the following functions:

autoplot(), gg_season(), gg_subseries(), gg_lag(),
ACF() |> autoplot()

```{r}
myseries |>
  autoplot(Turnover) +
  labs(y = "Turnover (million $AUD)", x = "Time (Years)",
  title = myseries$Industry[1],
  subtitle = myseries$State[1])

myseries |>
  gg_season(Turnover, labels = "both") +
  labs(y = "Turnover (million $AUD)",
  title = myseries$Industry[1],
  subtitle = myseries$State[1])

myseries |>
  gg_subseries(Turnover) +
  labs(y = "Turnover (million $AUD)", x="")

myseries |>
  gg_lag(Turnover, lags=1:24, geom='point') + facet_wrap(~ .lag, ncol=6)

myseries |>
  ACF(Turnover, lag_max = 50) |>
  autoplot()
```

Can you spot any seasonality, cyclicity and trend? What do you learn about the series?

8.8: Recall your retail time series data (from Exercise 7 in Section 2.10).

a. Why is multiplicative seasonality necessary for this series?

```{r}
set.seed(12345678)
myseries <- aus_retail |>
  filter(`Series ID` == sample(aus_retail$`Series ID`, 1))
myseries |> autoplot(Turnover)
```

We see a fanning out in the oscillations (gets wider over time)

b. Apply Holt-Wintersâ€™ multiplicative method to the data. Experiment with making the trend damped.

```{r}
fit <- myseries |>
  model(
    hw = ETS(Turnover ~ error("M") + trend("A") + season("M")),
    hwdamped = ETS(Turnover ~ error("M") + trend("Ad") + season("M"))
  )
fc <- fit |> forecast(h = 36)
fc |> autoplot(myseries)
```

c. Compare the RMSE of the one-step forecasts from the two methods. Which do you prefer?

```{r}
accuracy(fit)
```

d. Check that the residuals from the best method look like white noise.

```{r}
fit |>
  select("hwdamped") |>
  gg_tsresiduals()
```

The residuals look fairly normally distributed!

# Activity 2: Fit model(s) to just the training set
Fit both the HW or HW damped to the series you used previously, but set up a training set
for the last 24 months of data.

Then, forecast the next 24 months and compare to the observed data you held out (the test
set).

```{r}
myseries <- aus_retail |>
  filter(`Series ID` == sample(aus_retail$`Series ID`, 1)) |>
  mutate(train = Month < yearmonth("2016 Dec"))

## plot training and test in different colors
myseries |> ggplot(aes(x = Month, y = Turnover, col = train)) +
  geom_line() +
  labs(y = "Turnover (million $AUD)", x = "Time (Years)",
  title = myseries$Industry[1],
  subtitle = myseries$State[1])
```

```{r}
fit <- myseries |>
  filter(train) |> # same as filter(Month < yearmonth("2016 Dec")) |>
  model(
    hw = ETS(Turnover ~ error("M") + trend("A") + season("M")),
    hwdamped = ETS(Turnover ~ error("M") + trend("Ad") + season("M"))
  )

fit |> accuracy()
```

```{r}
fc <- fit |> forecast(h = 25)
fc |> autoplot(myseries |> filter(train))

fc <- fit |> forecast(h = 25)
fc |> autoplot(myseries |> filter(train & Month >= yearmonth("2005 Dec")))

fc <- fit |> forecast(h = 25)
fc |> autoplot(myseries |>
  filter(Month >= yearmonth("2016 Dec")))
```

Forecast Accuracy

```{r}
fit |> forecast(h = 24) |> accuracy(myseries)

fit |> forecast(h = 24)
```

# Activity 3: Time series cross-validation
For either the hw or hwdamped model, fit the model to the first 36 months of data, then
forecast the next 3 months. Increment the fold by 3 months.

```{r}
# set up data for cross-validation
myseries_cv <-myseries |>
  slice(1:(n() - 3)) |> ## hold out 3 to forecast
  stretch_tsibble(.init = 36, .step = 3)
```

```{r}
#View(myseries_cv$Month)
# fit the model to all points for first 36 (initial fold), then increment the fold by size 3

# fit models to cross-validation data sets
# takes a bit to run
myseries_cv |>
  model(
    hw = ETS(Turnover ~ error("M") + trend("A") + season("M")),
    hwdamped = ETS(Turnover ~ error("M") + trend("Ad") + season("M")),
    snaive = SNAIVE(Turnover),
    log_ets = ETS(log(Turnover)),
    stl = decomposition_model(STL(log(Turnover)), ETS(season_adjust))
  ) |>
  forecast(h = 3) |>
  accuracy(myseries)
```











